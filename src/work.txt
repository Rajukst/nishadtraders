
import React, { useEffect, useState, useRef } from 'react';
import "./ModalCSS/Modal.css"
import ContactDetailsModal from './ModalButtons/ContactDetailsModal';

const ModalA = ({ closeModalA }) => {
    const [contacts, setContacts] = useState([]);
    const [filteredContacts, setFilteredContacts] = useState([]);
    const [searchQuery, setSearchQuery] = useState('');
    const [page, setPage] = useState(1);
    const [loading, setLoading] = useState(false);
    const [hasMore, setHasMore] = useState(true);
    const [showEvenOnly, setShowEvenOnly] = useState(false);
    const [selectedContact, setSelectedContact] = useState(null);
    const [showContactDetailsModal, setShowContactDetailsModal] = useState(false);
    const observer = useRef();

    useEffect(() => {
        setLoading(true);
        fetchContacts();

        return () => {
            if (observer.current) {
                observer.current.disconnect();
            }
        };
    }, [page]);

    useEffect(() => {
        if (!hasMore) return;

        observer.current = new IntersectionObserver(entries => {
            if (entries[0].isIntersecting) {
                setPage(prevPage => prevPage + 1);
            }
        });

        if (loading) return;

        observer.current.observe(document.querySelector(".endOfContacts"));

        return () => {
            if (observer.current) {
                observer.current.disconnect();
            }
        };
    }, [loading, hasMore]);

    useEffect(() => {
        setFilteredContacts(contacts.filter(contact => {
            const normalizedQuery = searchQuery.toLowerCase();
            return contact.phone.toLowerCase().includes(normalizedQuery);
        }));
    }, [searchQuery, contacts]);

    useEffect(() => {
        if (showEvenOnly) {
            setFilteredContacts(prevFilteredContacts => prevFilteredContacts.filter((_, index) => index % 2 === 0));
        } else {
            setFilteredContacts(contacts.filter(contact => {
                const normalizedQuery = searchQuery.toLowerCase();
                return contact.phone.toLowerCase().includes(normalizedQuery);
            }));
        }
    }, [showEvenOnly, contacts, searchQuery]);
    
    const fetchContacts = async () => {
        try {
            const response = await fetch(`https://contact.mediusware.com/api/contacts/?page=${page}&page_size=20`);
            const data = await response.json();
            const newContacts = data.results;
            if (newContacts.length === 0) {
                setHasMore(false);
                setLoading(false);
                return;
            }
            setContacts(prevContacts => [...prevContacts, ...newContacts]);
            setLoading(false);
        } catch (error) {
            console.error('Error fetching contacts:', error);
            setLoading(false);
        }
    };

    const handleSearch = (query) => {
        setSearchQuery(query);
    };

    const handleFilter = (filter) => {
        setPage(1);
        setSearchQuery('');
        setLoading(true);
        setFilteredContacts([]);
        switch (filter) {
            case 'all':
                setFilteredContacts(contacts);
                break;
            case 'us':
                setFilteredContacts(contacts.filter(contact => contact.country.name === 'United States'));
                break;
            default:
                setFilteredContacts(contacts);
        }
    };
    const openContactDetailsModal = (contact) => {
        setSelectedContact(contact);
        setShowContactDetailsModal(true);
    };

    const closeContactDetailsModal = () => {
        setShowContactDetailsModal(false);
    };

    return (
        <>
            <div className="modalBackground">
                <div className="modalContainer">
                    <div className="title">
                        <h1>Modal A</h1>
                    </div>
                    <div className="modalTitles">
                        <div className="footer">
                            <button className='modalButtonA' onClick={() => handleFilter('all')}>All Contacts</button>
                            <button className='modalButtonB' onClick={() => handleFilter('us')}>US Contacts</button>
                            <button onClick={() => closeModalA(false)} className='modalButtonC'>Close</button>
                        </div>
                        <div className="evenOnly">
                        <input
                            type="checkbox"
                            id="even-only"
                            name="even"
                            value="evenonly"
                            checked={showEvenOnly}
                            onChange={(e) => setShowEvenOnly(e.target.checked)}
                        />
                        <label htmlFor="even">Even Only</label>
                        </div>
                    </div>
                    <div className="searchOptions mt-3">
                        <input type="text" name="" id="" placeholder='Search Anything' value={searchQuery} onChange={(e) => handleSearch(e.target.value)} />
                    </div>
                    <div className="body">
                        <table>
                            <thead>
                                <tr>
                                    <th>Sl No</th>
                                    <th>Contacts</th>
                                    <th>Country</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredContacts.map((contact, index) => (
                                   <tr key={index + 1} onClick={() => openContactDetailsModal(contact)}>
                                        <td>{showEvenOnly ? (index + 1) * 2 : index + 1}</td>
                                        <td>{contact.phone}</td>
                                        <td>{contact.country.name}</td>
                                    </tr>
                                ))}
                                {loading && <tr><td colSpan="3">Loading...</td></tr>}
                                {!loading && hasMore && <tr><td colSpan="3" className="endOfContacts">Scroll to load more</td></tr>}
                                {!loading && !hasMore && <tr><td colSpan="3">No more contacts to load</td></tr>}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            {showContactDetailsModal && <ContactDetailsModal contact={selectedContact} closeModal={closeContactDetailsModal} />}
        </>
    );
};

export default ModalA;



UserList Component
import React, { useEffect, useRef, useState } from "react";
import { Container } from "react-bootstrap";
import { useQuery } from "react-query";
import { Link } from "react-router-dom";
import Footer from "../Footer/Footer";

const UserList = () => {
  const [search, setSearch] = useState("");
  const url = `https://asadback.onrender.com/detaCollection`;
  const { data: user = [], isLoading } = useQuery({
    queryKey: ["detaCollection"],
    queryFn: async () => {
      const res = await fetch(url);
      const data = await res.json();
      return data;
    },
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [contacts, setContacts] = useState([]);
  const [filteredContacts, setFilteredContacts] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const observer = useRef();

  const fetchContacts = async () => {
    try {
      setLoading(true);
      const response = await fetch(`https://asadback.onrender.com/detaCollection/?page=${page}&page_size=10`);
      const data = await response.json();
      const newContacts = data.results;
      if (newContacts.length === 0) {
        setHasMore(false);
        setLoading(false);
        return;
      }
      setContacts(prevContacts => [...prevContacts, ...newContacts]);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching contacts:', error);
      setLoading(false);
    }
  };

  useEffect(() => {
    setLoading(true);
    fetchContacts();

    return () => {
      if (observer.current) {
        observer.current.disconnect();
      }
    };
  }, [page]);

  useEffect(() => {
    if (!hasMore) return;

    observer.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting) {
        setPage(prevPage => prevPage + 1);
      }
    });

    if (loading) return;

    observer.current.observe(document.querySelector(".endOfContacts"));

    return () => {
      if (observer.current) {
        observer.current.disconnect();
      }
    };
  }, [loading, hasMore]);

  useEffect(() => {
    setFilteredContacts(contacts.filter(contact => {
      const normalizedQuery = searchQuery.toLowerCase();
      return contact.phone.toLowerCase().includes(normalizedQuery);
    }));
  }, [searchQuery, contacts]);

  const handleSearch = (query) => {
    setSearchQuery(query);
  };

  const payurl = `https://asadback.onrender.com/paymentList`;
  const { data: payments = [] } = useQuery({
    queryKey: ["paymentList"],
    queryFn: async () => {
      const res = await fetch(payurl);
      const data = await res.json();
      return data;
    },
  });
  // Join the user and payments arrays based on user ID
  const joinedData = user.map((userData) => {
    const paymentData = payments.find(
      (payment) => payment.usrId === userData._id
    );
    console.log("Payment data for user:", userData.name, paymentData); // Log payment data for each user
    return {
      ...userData,
      prevJer: paymentData ? paymentData.prevJer : 0,
    };
  });

  console.log("Joined data:", joinedData); // Log joined data array

  // Create an object to store user IDs and their corresponding total amounts
  const userTotals = {};

  // Initialize userTotals to 0 for all users
  for (const userData of user) {
    const userId = userData._id;
    userTotals[userId] = 0;
  }

  // Iterate through the payments array and calculate the total amount for each user
  for (const payment of payments) {
    const userId = payment.usrId;
    const give = parseInt(payment.give) || 0; // Treat undefined as 0
    const got = parseInt(payment.got) || 0; // Treat undefined as 0

    userTotals[userId] += give - got;
  }

  console.log("User totals:", userTotals);
  // Calculate total give, got, and prevJer for all users
  let totalGive = 0;
  let totalGot = 0;
  let totalPrevJer = 0;

  for (const payment of payments) {
    totalGive += parseInt(payment.give) || 0;
    totalGot += parseInt(payment.got) || 0;
    totalPrevJer += parseInt(payment.prevJer) || 0;
  }

  // Calculate the grand total by adding give, got, and prevJer
  const grandTotal = totalGive - totalGot + totalPrevJer;

  return (
    <>
    <Container fluid>
      <>
        <div className="topColumns">
          <div className="overAll">
            <div className="getAmnt">
              <h4 className="pt-2">মোট পাবো</h4>
              <h3>{grandTotal.toLocaleString()}</h3>
            </div>
            <div className="getAmnt">
              <h3 className="pt-2">মোট দেবো</h3>
              <h6></h6>
            </div>
          </div>
          <div className="filterDownLoadPress">
            <div className="serarch">
            <input type="text" name="" id="" placeholder='Search Anything' value={searchQuery} onChange={(e) => handleSearch(e.target.value)} />
            </div>
            <div className="filter">
              <i className="fa-solid fa-arrow-up-9-1"></i>
            </div>
            <div className="download">
              <i className="fa-solid fa-download"></i>
            </div>
          </div>
          <small className="ps-5">Total Customer:<span className="lenghtCusto">{user.length}</span></small>
        </div>
        <div className="userShow">
          {filteredContacts.map((singleData, index) => (
            <Link key={singleData._id} to={`${singleData._id}`} className="userLinks">
              <div className="userListss">
                <p>{singleData?.name}</p>
                {/* Display other user information here */}
              </div>
            </Link>
          ))}
          {loading && <p>Loading...</p>}
          {!loading && hasMore && <p className="endOfContacts">Scroll to load more</p>}
          {!loading && !hasMore && <p>No more contacts to load</p>}
        </div>
        <div className="customerAdd">
          <Link className="customerAd" to="/add">
            <i className="fa-solid fa-user-plus me-1"></i>Add
          </Link>
        </div>
      </>
    </Container>
    <Footer/>
    </>
  );
};

export default UserList;



