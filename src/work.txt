



UserList Component
import React, { useEffect, useRef, useState } from "react";
import { Container } from "react-bootstrap";
import { useQuery } from "react-query";
import { Link } from "react-router-dom";
import Footer from "../Footer/Footer";

const UserList = () => {
  const [search, setSearch] = useState("");
  const url = `https://nishadserver.vercel.app/detaCollection`;
  const { data: user = [], isLoading } = useQuery({
    queryKey: ["detaCollection"],
    queryFn: async () => {
      const res = await fetch(url);
      const data = await res.json();
      return data;
    },
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [contacts, setContacts] = useState([]);
  const [filteredContacts, setFilteredContacts] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const observer = useRef();

  const fetchContacts = async () => {
    try {
      setLoading(true);
      const response = await fetch(`https://nishadserver.vercel.app/detaCollection/?page=${page}&page_size=10`);
      const data = await response.json();
      const newContacts = data.results;
      if (newContacts.length === 0) {
        setHasMore(false);
        setLoading(false);
        return;
      }
      setContacts(prevContacts => [...prevContacts, ...newContacts]);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching contacts:', error);
      setLoading(false);
    }
  };

  useEffect(() => {
    setLoading(true);
    fetchContacts();

    return () => {
      if (observer.current) {
        observer.current.disconnect();
      }
    };
  }, [page]);

  useEffect(() => {
    if (!hasMore) return;

    observer.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting) {
        setPage(prevPage => prevPage + 1);
      }
    });

    if (loading) return;

    observer.current.observe(document.querySelector(".endOfContacts"));

    return () => {
      if (observer.current) {
        observer.current.disconnect();
      }
    };
  }, [loading, hasMore]);

  useEffect(() => {
    setFilteredContacts(contacts.filter(contact => {
      const normalizedQuery = searchQuery.toLowerCase();
      return contact.phone.toLowerCase().includes(normalizedQuery);
    }));
  }, [searchQuery, contacts]);

  const handleSearch = (query) => {
    setSearchQuery(query);
  };

  const payurl = `https://nishadserver.vercel.app/paymentList`;
  const { data: payments = [] } = useQuery({
    queryKey: ["paymentList"],
    queryFn: async () => {
      const res = await fetch(payurl);
      const data = await res.json();
      return data;
    },
  });
  // Join the user and payments arrays based on user ID
  const joinedData = user.map((userData) => {
    const paymentData = payments.find(
      (payment) => payment.usrId === userData._id
    );
    console.log("Payment data for user:", userData.name, paymentData); // Log payment data for each user
    return {
      ...userData,
      prevJer: paymentData ? paymentData.prevJer : 0,
    };
  });

  console.log("Joined data:", joinedData); // Log joined data array

  // Create an object to store user IDs and their corresponding total amounts
  const userTotals = {};

  // Initialize userTotals to 0 for all users
  for (const userData of user) {
    const userId = userData._id;
    userTotals[userId] = 0;
  }

  // Iterate through the payments array and calculate the total amount for each user
  for (const payment of payments) {
    const userId = payment.usrId;
    const give = parseInt(payment.give) || 0; // Treat undefined as 0
    const got = parseInt(payment.got) || 0; // Treat undefined as 0

    userTotals[userId] += give - got;
  }

  console.log("User totals:", userTotals);
  // Calculate total give, got, and prevJer for all users
  let totalGive = 0;
  let totalGot = 0;
  let totalPrevJer = 0;

  for (const payment of payments) {
    totalGive += parseInt(payment.give) || 0;
    totalGot += parseInt(payment.got) || 0;
    totalPrevJer += parseInt(payment.prevJer) || 0;
  }

  // Calculate the grand total by adding give, got, and prevJer
  const grandTotal = totalGive - totalGot + totalPrevJer;

  return (
    <>
    <Container fluid>
      <>
        <div className="topColumns">
          <div className="overAll">
            <div className="getAmnt">
              <h4 className="pt-2">মোট পাবো</h4>
              <h3>{grandTotal.toLocaleString()}</h3>
            </div>
            <div className="getAmnt">
              <h3 className="pt-2">মোট দেবো</h3>
              <h6></h6>
            </div>
          </div>
          <div className="filterDownLoadPress">
            <div className="serarch">
            <input type="text" name="" id="" placeholder='Search Anything' value={searchQuery} onChange={(e) => handleSearch(e.target.value)} />
            </div>
            <div className="filter">
              <i className="fa-solid fa-arrow-up-9-1"></i>
            </div>
            <div className="download">
              <i className="fa-solid fa-download"></i>
            </div>
          </div>
          <small className="ps-5">Total Customer:<span className="lenghtCusto">{user.length}</span></small>
        </div>
        <div className="userShow">
          {filteredContacts.map((singleData, index) => (
            <Link key={singleData._id} to={`${singleData._id}`} className="userLinks">
              <div className="userListss">
                <p>{singleData?.name}</p>
                {/* Display other user information here */}
              </div>
            </Link>
          ))}
          {loading && <p>Loading...</p>}
          {!loading && hasMore && <p className="endOfContacts">Scroll to load more</p>}
          {!loading && !hasMore && <p>No more contacts to load</p>}
        </div>
        <div className="customerAdd">
          <Link className="customerAd" to="/add">
            <i className="fa-solid fa-user-plus me-1"></i>Add
          </Link>
        </div>
      </>
    </Container>
    <Footer/>
    </>
  );
};

export default UserList;



